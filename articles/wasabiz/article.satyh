@import: ../../class/yabaitech
@require: itemize
@require: base/image
@require: base/block
@require: base/format
@require: base/typeset/base

module Wasabiz : sig

  val article : block-text

end = struct

let-block ctx +pdf filename =
    ctx |> Block.read '<+p{\eval-const(Image.of-pdf (Format.format `articles/wasabiz/pictures/{}` [filename]) 1 |> Inline.of-image 13.5cm);}>

let-inline ctx \todo it =
    ctx |> Inline.read it

let bibliography = []

let metadata = (|
    bibliography = bibliography;
    title = {Let's verify your C program!};
    author = {wasabiz};
|)

let article = '<
+chapter ?:(`wasabiz-article`) (metadata) <
+section{はじめに}<
+p{
    この記事ではC言語で書かれたプログラムの正しさを証明する手法について解説します．
    Cのプログラムの性質を証明すると言っても世の中にはいろいろな手法があります．
    とりあえず挙げてみるなら大まかに以下の三つの方針がありえるでしょうか．
}
+listing{
    * すでに存在する証明をもとに絶対に正しいCプログラムを生成する．(プログラム抽出)
    * Cプログラムを入れると欲しい性質が満たされているか自動で検査してくれるツールを使う（自動検証）
    * Cプログラムを別の言語に変換して変換後のプログラムに証明をつける（自動/半自動検証）
}
+p{
    (上のやつのpros/consの表)
}
+p{
    一つ目の手法でよく使われるのはCoqとかでしょうか．
    Coqそれ自体は依存型付のプログラミング言語でなんか証明も書けるようなものです．
    Coqで書ける(プログラマー的に興味のある)証明はこのCoqに内蔵された依存型付言語に対するものなのですが，CoqにはそのようなCoqプログラムを別の言語に(挙動を保ったまま)変換するextractionという機能が備わっています．
    そのため欲しいCプログラムと同じ挙動をするプログラムをCoq上で記述してCoq上でそれについての証明を書きCプログラムに変換するということが出来ます．
    （たぶんデフォルトではCへの抽出に対応していないのでいろいろと頑張る必要がある．）
    この方法はCoqというとても整備された環境で証明が書けるという利点はあるのですが既に出来上がっているCプログラムの検証をするには向いていません．
}
+p{
    二つ目の手法はよく研究されている手法です．
    こちらは一つ目の手法と異なりすでに出来上がっているCプログラムの検証が可能です．
    有名なところだとVeriFastやFacebook Inferなどがあります．
    C言語に限らなければDafnyやJava PathFinderが有名でしょうか．
    とはいえ上にあげた3つはそれぞれ理論的/実装的に異なるものなので一概には比較できません．
    VeriFastの場合はZ3を用いたInductive Predicate付きのSeparation Logicを使った仕様記述とZ3をベースにしたSymbolic Executionによる検証を実装しています．
    VeriFastはすでにあるCプログラムに対して自動で検証ができしかも速い(らしい)という意味でとても良さそうなのですが，一方で仕様記述言語が独自のため表現能力に限界があるという点と自動証明がうまく行かなかった場合につらい点がイマイチです．
    Inferも同じくSeparation Logicベースでメモリのバグなどを自動で検出してくれますが入力に仕様を与えられないのと健全性がない(偽陽性がでる)点はイマイチです．
}
+p{
    三つ目の手法はややトリッキーですがおそらく最も現実的な手法です．
    最も有名なのはFrama-Cです．
    Frama-C は典型的にはCプログラムを WhyML と呼ばれるMLライクな言語に変換します．
    WhyMLはWhy3というプロジェクトの成果で，Why3ではWhyMLを検証するための様々なツール(例えばCoqで証明するためのライブラリや自動検証ツールなど)を提供しています．
}
+p{
    本記事で扱う内容は三つ目の手法です．
    ただし使うツールはFrama-C + Why3ではなく c-parser と呼ばれるツールです．
    c-parserはseL4という証明付きマイクロカーネルを開発する上で作成されたツールです．
    seL4はそれ自体が非常によくできておりカーネル開発者的視点からもプログラム検証的視点からもとても興味深いプロジェクトなのですが，それは一旦さておきc-parserはCで書かれたマイクロカーネルをSimplという言語に翻訳するためのツールです．
    SimplはWhile言語に毛が生えたようなもので，WhyMLとは異なり手続き型の側面を強く残しています．
    Why3とSimplの違いはソフトウェアスタックの大きさです．
    Why3(+Frama-C)は巨大かつレイヤーが多重になった構成ですがあSimpl(+c-parser)はすべてがIsabelle/HOL前提で作られておりIsabelle/HOLの中だけで完結するように作られています．
    そのため盲目的に信頼しなければならないコンポーネントが少ないという特徴があります．
    また，Isabelleの既存の資産を最大限に活用することができます．
    Why3の方がさまざまなプラグインを持っており機能自体は多いのですが，Simpl(+c-parser)の思想とseL4の証明に使われたという実績を考慮してこちらを採用することにしました．
}
>

+section{Isabelleとかの概要} <
+p{
    Isabelle/HOLは高階論理に基づく定理証明支援系です．
    使用感はざっくりいうとCoqみたいなものですが，Coqでは証明も項も全てCoqの言語で記述するのに対してIsabelleはコアとなる論理の上でさまざまな「ライブラリ理論」が提供されています．
    よく使われるライブラリ理論（というかみんなこれしか使っていない）が「HOL」という理論です．
    項として OCaml みたいな言語があり，それに対する証明を書く論理が別途提供されています．
    依存型はないのでそこはうまいこと項+述語とかで対応します．
    ちなみに証明記述のためのIsarという言語があってこれがとても便利です．
}
+p{
    Simplは2005年ごろにNorbert Schirmerの博士論文で提案されたプログラミング言語です．
    SimplはC言語やJavaのような手続き的なプログラミング言語からそのエッセンスを抽出したような言語です．
    エッセンスを抽出した言語，というと普通は理論的にはよく振る舞うけど実用的ではない言語を指しがちなのですが，Simplの場合はC言語にある「あやしい機能」をほぼそのままサポートしています．
    たとえば，相互再帰，ポインタ，ミュータブルな局所変数は当然として，関数ポインタや配列の添字外参照も直接モデルできます．
    SimplはIsabelle/HOLの中でASTが定義されており，専用のHoare Logicも提供されています．
}
+p{
    seL4のリポジトリにはc-parserというツールが含まれています．
    これはMichael Norrishによって開発された，C言語のプログラムをSimplへと変換するプログラムです．
    正確にはStrictCと呼ばれるC言語のサブセットに対応しています．（StrictCは簡単にいうとC言語からgotoやunionなどを抜いたものです．）
    Isarの拡張もバンドルされておりこのツールだけでも十分使えはするのですが，基本的には次に説明するAutoCorresと組み合わせて使います．
}
+p{
    AutoCorresはStrictCで書かれたプログラムを意味を壊さずにIsabelle/HOL向けに変換するソフトウェアです．
    こういうとc-parserとの違いがよくわからないと思うのでもう少し解説すると，実はc-parserは実際に使ってみると出力結果のSimplコードが結構キビしい感じのものになりがちです（まあ実はというかありがちな話ですが）．
    そこでAutoCorresはc-parserの出力結果をさらに抽象化して人間に読みやすく検証しやすいプログラムに変換してくれます．
    さらにその際にもとのキビしい感じのSimplのプログラムと出力後のキレイなプログラムの間で正しく対応が取れていること（i.e. 意味が壊れていないこと）の証明も出力してくれます（これがAutoCorresという名前の由来です）．
    この仕組みのおかげで人間にとっての読みやすさ・検証しやすさと信頼性を両立しています．
}
+p{
    さて先立つ節でこの記事ではc-parserを使いますと宣言したところですが，実際にはAutoCorresを使って間接的にc-parserを呼び出します．
    また，内容的にはAutoCorresのチュートリアルに大まかに従ったものになります．
}
>
+section{はじめてのAutoCorres} <
+p{
    まずは一番簡単な例としてピュアなCプログラムの証明を行ってみたいと思います．
    実際に証明するコード\code(`minmax.c`);はこちら：
}
+code(```
unsigned min(unsigned a, unsigned b) {
    if (a <= b) {
        return a;
    } else {
        return b;
    }
}

#define UINT_MAX (-1u)

unsigned max(unsigned a, unsigned b) {
    return UINT_MAX - min(UINT_MAX - a, UINT_MAX - b);
}
```);
+p{
    みて分かる通り\code(`min`);は\code(`unsigned int`);を二つ受け取って小さい方を返すだけの関数です．
    一方\code(`max`);は名前から類推される通り\code(`unsigned int`);を二つ受け取って大きい方を返す関数なのですが，実装がトリッキーです．
    そこで，さしあたってこの変な実装の\code(`max`);が期待する動作を行うかどうかを証明することを目標にします．
}
+subsection{\code(`min`);を証明してみる} <
+p{
    まずはこれらをIsabelleに読み込んでみます．
    一旦AutoCorresのことを忘れてc-parserだけを使ってみます．
    c-parserをインポートすると\code(`install_C_file`);というキーワードが有効になります．
    このキーワードを使うことでCのプログラムをSimplのプログラムとしてIsabelleに読み込むことができます．
    この際\code(`min`);という名前のCの関数（の中身）はSimplプログラムに変換された後に\code(`min_body`);という名前で定義されます．
    （\code(`max`);も同様です．)
    \code(`min_body`);の中身がなんなのかは\code(`min_body_def`);をみるとわかります（これはIsabelleの機能です）．
}
+pdf(`min_body_def.pdf`);
+p{
    スクリーンショットをみると分かる通り変換後のプログラムは
}
+code(```
min_body ≡
TRY
  IF ´a ≤ ´b THEN
    creturn global_exn_var_'_update ret__unsigned_'_update a_'
  ELSE
    creturn global_exn_var_'_update ret__unsigned_'_update b_'
  FI;;
  Guard DontReach {} SKIP
CATCH SKIP
END
```);
+p{
    という感じで本質的ではないコードが所々に挿入されています．
    例えば関数の最後の方に\code(`Guard DontReach {} SKIP`);という文がありますが，これはC言語の仕様上「戻り値がvoid型でない関数は必ず値を返さなければならない」ことになっているために挿入されています．
}
+p{
    次にAutoCorresを使って先ほど得たプログラムの抽象化を行います．
    AutoCorresを使うにはずばり\code(`autocorres`);というキーワードを使います．
    \code(`autocorres`);を行うと抽象化されたプログラムと抽象化の前後でのプログラムの対応の証明が得られます．
    たとえば\code(`min`);の場合前者には\code(`min'`);，後者には\code(`min'_ac_corres`);という名前がつけられます．
}
+pdf(`min'_def.pdf`);
+p{
    AutoCorresを通した結果複雑だった\code(`min_body`);から
}
+code(```
min' ?a ?b ≡ if ?a ≤ ?b then ?a else ?b
```);
+p{
    という，とても直接的な定義が得られました．
}
+p{
    ちなみにIsabelleの標準で定義されている\code(`min`);関数の定義はこれと全く同じものです．
    よって以下のようにreflexivityを一回使うだけでCの\code(`min`);の正しさが証明できたことになります（Isabelleの\code(`min`);は信頼でき，かつそれと同じ動作をするという意味で）．
}
+code(```
lemma min'_is_min: "min' a b = min a b"
  unfolding min'_def min_def
  by (rule refl)
```);
+p{
    ところで，先ほどちらっと紹介した変換前後の対応の証明は以下のような命題に対するものです．
    \todo{(そのうち拡充)}
}
+code(```
ac_corres (lift_global_heap ∘ globals) True Γ ret__unsigned_'
 ((λs. a_' s = ?a') and (λs. b_' s = ?b') and
  (λx. abs_var ?a id ?a' ∧ abs_var ?b id ?b') ∘ lift_global_heap ∘ globals)
 (L2_gets (λ_. min' ?a ?b) [''ret'']) (Call min_'proc)
```);
>
+subsection{\code(`max`);を証明してみる} <
+p{
    
}
>
>
>
>

end
