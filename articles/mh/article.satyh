@import: ../../class/yabaitech

module Mh : sig

  val article : block-text

end = struct

let bibliography = [
  (`cpgame`, WebSite(|
    author = {|フリー百科事典　ウィキペディア日本語版|};
    title = {コンピュータゲーム};
    url = `https://ja.wikipedia.org/wiki/コンピュータゲーム`;
    year = 0;
  |));
  (`steam`, WebSite(|
    author = {|Valve co.|};
    title = {Steam};
    url = `https://store.steampowered.com`;
    year = 0;
  |));
  (`hrm`, WebSite(|
    author = {|Tomorrow Corporation|};
    title = {Human Resource Machine};
    url = `https://tomorrowcorporation.com/humanresourcemachine`;
    year = 0;
  |));
  (`7bh`, WebSite(|
    author = {|Tomorrow Corporation|};
    title = {7 Billion Humans};
    url = `https://tomorrowcorporation.com/7billionhumans`;
    year = 0;
  |));
  (`tis`, WebSite(|
    author = {|ZACHTRONICS|};
    title = {TIS-100};
    url = `http://www.zachtronics.com/tis-100/`;
    year = 0;
  |));
  (`zac`, WebSite(|
    author = {|ZACHTRONICS|};
    title = {ZACHTRONICS};
    url = `http://www.zachtronics.com`;
    year = 0;
  |));
  (`sio`, WebSite(|
    author = {|ZACHTRONICS|};
    title = {SHENZHEN I/O};
    url = `http://www.zachtronics.com/shenzhen-io/`;
    year = 0;
  |));
  (`sz`, WebSite(|
    author = {|Pleasing Fungus|};
    title = {Silicon Zeroes};
    url = `http://pleasingfungus.com/Silicon%20Zeroes/`;
    year = 0;
  |));
  (`sc`, WebSite(|
    author = {|ZACHTRONICS|};
    title = {SpaceChem};
    url = `http://www.zachtronics.com/spacechem/`;
    year = 0;
  |));
  (`om`, WebSite(|
    author = {|ZACHTRONICS|};
    title = {Opus Mugnam};
    url = `http://www.zachtronics.com/opus-magnum/`;
    year = 0;
  |));
  (`coa`, WebSite(|
    author = {|ZACHTRONICS|};
    title = {The Codex of Alchemical Engineering};
    url = `https://www.kongregate.com/games/krispykrem/the-codex-of-alchemical-engineering`;
    year = 0;
  |));
  (`koh`, WebSite(|
    author = {|ZACHTRONICS|};
    title = {KOHCTPYKTOP};
    url = `http://www.kongregate.com/games/krispykrem/kohctpyktop-engineer-of-the-people?referrer=Jayisgames`;
    year = 0;
  |));
  (`zl`, WebSite(|
    author = {|ZACHTRONICS|};
    title = {ZACH-LIKE};
    url = `http://www.zachtronics.com/zach-like/`;
    year = 0;
  |));
  (`manu`, WebSite(|
    author = {|Pleasing Fungus|};
    title = {Manufactoria};
    url = `http://www.kongregate.com/games/PleasingFungus/manufactoria`;
    year = 0;
  |));
  (`jlb`, WebSite(|
    author = {|Jahooma|};
    title = {Jahooma's Logic Box};
    url = `https://logicbox.jahooma.com`;
    year = 0;
  |));
  (`jlb_old`, WebSite(|
    author = {|Jahooma|};
    title = {Jahooma's Logic Box};
    url = `http://www.kongregate.com/games/jahooma/jahoomas-logicbox`;
    year = 0;
  |));
  (`tf`, WebSite(|
    author = {|duerig|};
    title = {Tile Factory};
    url = `http://www.kongregate.com/games/duerig/tile-factory?acomplete=tile+fa`;
    year = 0;
  |));
  (`hoj`, WebSite(|
    author = {|quolc|};
    title = {Herbert Online Judge};
    url = `http://herbert.tealang.info`;
    year = 0;
  |));
  (`scr`, WebSite(|
    author = {|Screeps|};
    title = {Screeps};
    url = `https://screeps.com`;
    year = 0;
  |));
  (`dusk`, WebSite(|
    author = {|Misfits Attic|};
    title = {Duskers};
    url = `http://duskers.misfits-attic.com`;
    year = 0;
  |));
]

let article = '<
    +chapter ?:(`mh-article`)
    (|
        bibliography = bibliography;
        title = {忙しくないプログラマのためのゲーム紹介};
        author = {mh};
    |)
    <

  +section{はじめに}<
    +p{
みなさん、ゲームしてますか？
人生はゲームみたいなものという意見もあるでしょうが、
ここではコンピュータゲーム[https://ja.wikipedia.org/wiki/コンピュータゲーム]一般
（据置型ハードやスマホゲームを含む）を指すことにしましょう。
去年は何本くらいゲームをプレイしましたか？ストーリーはクリアしました？
やり込み要素まで手をつけたりしてますか？
最近気づき始めたのですが、人々はあまりゲームをしないんですね。
「有名タイトルをストーリークリアまで」というのはまだ良い方で、
「スマホゲーを一つ」とか「プログラム書いてる方が楽しい」という人の方が余程多い。
それともそれが大人になるってことなのかな。悲しいですね。
もちろんゲームというのは据置機大御所ビッグタイトルから個人制作のブラウザゲームまで
毎年山ほど制作されているわけで、
しかもそれが自分にとって楽しいかどうかも多少なりプレイしてみなければわからないですから、
有名な/話題に上がったものをピックアップして遊ぶ、楽しくやり込めるものを一つ見つける
というのは理にかなった話ではあります。
とはいえそれでは一ゲーマーとしてあまりに悲しい、みなさんにもっと非有名ゲームを遊んで欲しい、
小規模制作会社の高品質なゲームを楽しんでほしい、あわよくばインディーズゲーム沼に嵌ってほしい、
クソゲーを踏んで辛くなってほしい、むしろ自分から踏み抜きに行くようになってほしい。
そんな気持ちで本記事はできています。
    }

    +p{
というわけで本記事ではゲームタイトルの紹介を行なっていきます。
ヤバイ"テック"？ 関係ありません。技術的な内容は一切ありません。
とはいえあまりにテーマから離れると私がサークル内で浮いてしまう恐れがありますから、
想定読者をプログラマのみなさんと置きまして、多少でも興味を持ってもらえるように
内容がプログラミングであるものを中心にタイトルを選択していきます。
ここで「内容が」プログラミングであると書きましたが、
これは端的にはゲーム中で定義される独自の言語を用いて、
与えられた入出力を満たすプログラムを記述することを目標としていることを指しています。
基本的にはパズルゲームに分類されるでしょう。
おかしな言語を指定してくる競技プログラミング、と形容すればわかりやすいでしょうか。
もちろん何をどうすればいいかはゲーム内で説明されますから、前提知識なしで大丈夫、
一般の方でも十分楽しめると思います。
一つでも目に留まるタイトルがあればなによりです。
    }
  >

  +section{まえおき}<
    +p{
本題に入る前にどうやればそれらのゲームを手に入れられるのかについて言及しておきます。
本記事では基本的にPCでプレイするゲームを対象とするので、
PC上にそのための環境を構築することになります。
とは言っても特に言及しておかねばならないのはSteam[url]くらいでしょう。
ご存知の方も多いのではと思いますが、SteamはValve co.によって運用される
PCゲームプラットフォームの最大手の一つです。
アカウントを登録し公式アプリをインストールしてしまえば、
そこを起点にゲームの検索・購入・インストールから実行まで行えるので迷うことはあまりないと思います。
インディーズを含む数多くのゲームが配信されており、
PCでゲームをするならアカウントを作成しておいて間違いないでしょう。
より詳しい情報は公式ページなりWikipedia[]なりを参照していただければと思います。
    }

    +p{
Steam以外で紹介するのはいわゆるブラウザゲームになります。
ChromeやFirefoxといったウェブブラウザからアクセスするだけでプレイできますから、
一部Flashが必要なものがあるくらいで特に準備は必要ありません。
またこちらの方は無料プレイのものが多くなります。ありがたいですね。
ジャンル自体が気にいるかわからない、とりあえず試しにプレイしてみたいという方は
そちらから入るのも良いでしょう。
    }
  >

  +section{ほんだい}<
    +p{
さあ本題に入りましょう。
まずは（比較的）有名そうなところからです。
    }

    +p{
Human Resource Machine\cite[`hrm`];（以下HRM）は、一会社員となり
上司から与えられるお仕事を機械的にこなすためのルーチンを組むゲームです。
少々前ですがAtCoderのChokudai氏が言及していたこともありご存知の方もいらっしゃるでしょうか。
ゲーム内容は端的に言えば機械語でのプログラミングで、
add, neg, succ程度の簡素な数値演算、比較とジャンプ命令によるループ実装、
後半にはメモリアクセス的な処理まで駆使して、
高級言語ならさらりと書けるであろうコードを四苦八苦しつつ組み立てることになります。
全体的な難易度はプログラミングに慣れているならば簡単よりといったところですが、
高難易度問題や各問題の追加目標となる実行速度最適化とコードゴルフも用意されており
そこまで手を付ければそれなりに大変です。
開発元に特徴的なギョロ目二頭身キャラたちによる（少々ブラックな）ストーリーもあるものの、
なかなか難解なのでオマケ程度に考えておくのが良いかも。
    }

    +p{
このゲームのようにアセンブリを書かせるシステムは比較的多く、
この後でもいくつも紹介することになります。
普段と命令セットが変わることによるゲーム感の向上や
低レイヤゆえの実装の簡便さが採用の理由でしょうか。
とは言えそこに少しのアレンジが加わることで大きくゲーム体験が変わってしまうのが面白いところです。
HRMはそう言う意味ではかなり味付けが少なくシンプルなので、
この類のゲームの入り口としてもお勧めです。
Steam以外にもNintendo Switchからも配信されているので、手も出しやすいでしょう。
    }

    +p{
このゲーム実はすでに続編である7 billion humans\cite[`7bh`];が公開されています。
こちらでは前作で一会社員だったところから少々階級が上がり、
中間管理職としてチーム運営、i.e. 並列プログラミング、を行うことになります。
基本的なインタフェースは大きく変化しないものの、プログラムの内容がマルチスレッド想定となることで
難易度は体感かなり上昇しています。
複数の社員が同じコードを同期もなしに各々実行するという前提で
状態が違いうる社員間でのデータ受け渡しまで想定してのプログラム組立はなかなかに歯応えがあり、
前作をサクッと終わらせられた人でも挑戦しがいがあると思います（筆者はまだ途上で苦しんでいます）。
もちろんこちらにも実行時間最適化・コードゴルフ目標が設定されているので
さらなるやり込みも可能です。
存分に頭を絞りましょう。
    }

    +p{
同じく並列プログラミングがであるものの、
TIS 100\cite[`tis`];は大きく違うシステムとなっています。
こちらで求められるのは、ゲームタイトルを冠された計算機、TIS100のプログラミングです。
TIS100のハードウェアはレジスタ二つのみしか持たない小さな計算ノードが
グリッド状に接続されて構成されており、
プレイヤーは各ノードにそれぞれ個別のコードを記述して指定の挙動を実現させることになります。
各ノードに記述できるコード量が小さく制限されているため
処理をうまく分割して各ノードに分散させることを考える必要があり、一味違った解き味が楽しめます。
フレーバーではありますが、本作はチュートリアルが用意されておらず、
知人から譲り受けた仕様書という体のpdf（実際に印刷することが推奨されています）から
TIS100の命令セットやハードウェアを読み解きながら操作方法を学んでいく形をとっており、
ある種古臭い画面も合わせて雰囲気も楽しめると思います。
HRMにあった最適化目標がこちらにも用意されていますが、
こちらでは全プレイヤーから収集したデータがその元になっています。
世界中のプレイヤー達がどれだけのコード行数・実行時間で各面をクリアしたかを
ヒストグラムで確認することができるようになっており、自分の位置がはっきりとわかります。
各面の回答を複数保存できる仕様になっているので、記録追求はHRMよりやりやすくなっているはずです。
    }

    +p{
このゲームの開発元であるZACHTRONICS\cite[`zac`];はこの種のゲームを
メインに制作を行なっているチームです。
実のところこの記事用にリストアップしたゲームの半分近くが同チーム制作であることがわかり
どこまで紹介すべきか少々悩む部分もあるのですが、プレイした分については並べておこうと思います。
どれもクオリティが高い作品ばかりなので、気になるものがあればぜひプレイしてみてください。
    }

    +p{
SHENZHEN I/O\cite[`sio`];ではハードウェア込みでの製品開発をテーマにしています。
TIS100同様にゲーム付属のハードウェア仕様書pdfを参照しつつ、
指定の基板状にマイコンチップを配置・配線して製品を完成させます。
各チップに独自のアセンブリ言語でコードを書き込むことになるのですが、
TIS100同様書き込める行数が制限されているので、どう役割を分割するか考えることになる他、
数値に加えてアナログ値（ゲームの都合上実際にはデジタルですが）の二種類の
入出力配線を取り扱うことになります。
    }

    +p{
開発元は違いますがsilicon zero\cite[`sz`];も回路を接続するという意味で似たシステムになっています。
こちらでは扱う部品がかなり低レイヤに近くなっており、加算器やアダー、ラッチに
アドレス指定で値を読み書きするメモリといった電子回路部品を組み合わせていくことになります。
かなり軽いゲーム感でサクサクと進められるので、電子回路を学び始めた人にお勧めです（？）。
    }

    +p{
さてここからは一般的なコードを書くわけではないものに進んでいきましょう。
space chem\cite[`sc`];は打って変わってコンピュータから離れ、化学をテーマにしています。
とはいっても授業で学んだような化学合成が出てくるわけではなく、
謎技術によって分子を単体分離して扱える上
結合数の増減も物理法則を無視して自由自在に行えるのであくまでフレーバーではありますが。
ゲーム的には合成装置の盤面に原子を持ち運べるアームとそれが移動する軌道を設定し、
軌道上の各ポイントにアームの掴み・離しや入力となる化合物の投入指示を配置することで
動作を調整していくことになります。
クレーンゲームのアームの動きをプログラムするイメージが近いでしょうか。
配置の自由度は比較的高く、面によってはその自由度を生かして生成速度を調整し、
複数の装置がうまく協調してバランスよく動作するようにする必要も出てきます。
なお、筆者の環境ではOSのアップデートに伴って起動できなくなったため積みゲーと化しました。
Macの方は注意してください。
    }

    +p{
opus mugnam\cite[`om`];もかなり近いシステムを持ったゲームです。
こちらは錬金術がテーマですが、万物を構成する四元素のエレメントに加え、三原質（硫黄、水銀、塩）や
金属元素を結合・分離・変化させて目的の物質を構成していくことになります。
ヘックスの盤面にアーム、物質の結合・分離や変換を行う装置を配置し、
掴み離しや回転といった一連の動作を各アームにプログラムすることで、
生成物をアーム間で受け渡しながら合成を進める形になります。
space chemがクレーンゲームのようなイメージだったのに対し
こちらは工場の製造ライン（必ずしもラインにはなりませんが）のイメージで、
生成物だけでなくアームも盤面状に実体を持つので、
やりとりの間に衝突が起きないような配置と動作定義が必要になります。
ラインを構成した後、盤面上でアームが往復し生成物が整然と流れ組み立てられていく様を
眺めるの達成感はなかなかのものです。
見た目にも大変美しいゲームなので、ぜひ公式ページからPVを見てみてください。
    }

    +p{
実はこのゲームには前身となる作品も存在しています。
the codex of alchemists\cite[`coa`];がそれで、盤面が四角であることを除けば
ゲームシステムはほぼサブセット的内容になっています。
こちらは無料でのプレイ可能なので試しに遊んでみてはいかがでしょうか。
Flash製のブラウザゲームとなっているのでURLにアクセスするだけでOKです。
    }

    +p{
KOHCTPYKTOP\cite[`koh`];もthe codex of alchemists同様、Zachtronics最初期の作品の一つです。
冷戦時代の共産主義をフレーバーにしつつ、基板へ特殊な導体での配線を行うパズルになっています。
二種の導体で実現される論理ゲートを組み合わせて回路を構成するのですが、
配線状を流れる電気信号の物理的な遅延をうまく考慮・利用する必要があります。
問題数は多くないものの難易度はかなりハードで歯応えがあるものになっています。
ブラウザゲームとして公開されている他（上記リンク）、
the codex of alchemistsを含む初期作品や制作ノートをまとめたものがSteamで無料配布されています。
（ZACH-LIKE\cite[`zl`];）
    }

    +p{
そろそろZachtronicsから離れましょう。
Manufactoria\cite[`manu`];は
工場の生産物の品質チェック装置を作るゲーム、
と言いつつやることは01の列で表現された値が条件をみたすかのチェックです。
製品（01文字列）をベルトコンベアで流しながら、先頭一文字による分岐や文字の削除書込を利用して
指定の条件を満たすものを選別していきます。
各操作で先頭の一文字を処理していくという意味ではオートマトンを
平面上に構成していくような感もありますが、文字の追加もできるので
表現能力は多少上になりそうですね。
01列と言いましたが中盤からは利用できる文字も二つ増え、
そこそこ複雑な処理を求められるようになります。
最適化目標等は設定されていませんが、コミュニティを探せば部品の最小配置数を
競っていたりもするので気になったら覗いてみても良いかもしれません。
（たとえばこちらurl http://blog.livedoor.jp/lkrejg/archives/65437773.html）
    }

    +p{
jahooma's logic box\cite[`jlb`];も同様に文字列処理を行うブラウザゲームです。
入力として与えられる文字列を処理部品を用いて盤面上を流しつつ変換していく点では同じなのですが、
こちらでは入力文字種が01から英アルファベット+数値にまで増えています。
タイトル通り処理部品であるボックスを盤面に配置していくことになるのですが、
各面自体がまた別のボックスになっており、以降の面でも一つの部品として利用できるようになるという
独特の構成になっています（とはいえ再利用できるのは一部のみですが）。
途中からは自分自身を部品として配置できる再帰的な構成も現れます。
また値の受け渡し方法もベルトコンベアで動かせたManufactoriaからは少々変わり、
ベルトコンベアの代わりに各ボックスから一方向に一直線に投げ飛ばすことで受け渡しを行います。
自由度が下がっている分多少調整に難儀することになるでしょう。
    }

    +p{
上記のURLは改訂版で、前作となる作品も存在します\cite[`jlb_old`];。
どちらもブラウザゲームですが、旧版はFlash、新版はHTMLによる実装になっています。
正直なところ旧版の方がグラフィックやUIは上なのですが、旧版が気に入ったなら
問題数が充実しているほか作者へのお布施も可能なで新版にも手を出してみてください。
    }

    +p{
Tile factory\cite[`tf`];も同様に製品を盤面上で流しながら処理を加えていくゲームです。
こちらでは処理対象がタイトル通りのタイルで、これに指定の模様を印刷することが目的になります。
ベルトコンベアでの移動、スプレーでの色の吹き付け、上書きを防ぐためのマスク塗布に
塗料の混合など必要操作は多岐にわたります。
装置の起動方法も独特で、タイルが上を通ると反応する圧力センサによる起動をメインに、
シグナルの論理合成や遅延まで行うことができます。
カラフルなタイルや各装置のポップな動き、また文字列が登場しないことなど、
他より（視覚的な）親しみやすさは高めになっています。
    }

    +p{
忘れていましたがプログラミングゲームといえば
herbert online judge\cite[`hoj`];にも言及しない訳にはいきません。
盤面上を動き回るロボットの挙動を操り、指定のマスを正しく踏むように
独自の言語でプログラムするパズルゲームです。
かなり厳しく設定された文字数制限を潜り抜けるためのコードゴルフ要素がメインになっています。
サイトの公開自体は十年近く前になりますがプレイしている方はおり、
有志によるWikiも更新されているようです。
問題作成やリーダーボードも用意され、問題数も2000を超えているのでやりがいは十分でしょう。
    }

    +p{
最後に少々毛色が違うものを二つ紹介して終わりにしましょう。
ここまではプログラミングがテーマのゲームでしたが、
screeps\cite[`scr`];はプログラミングで操作を行うMMOゲームです。
ジャンル的にはシミュレーションで、各プレイヤーは自律動作するユニットを生産し、
広大なマップの上でリソースを収集し戦闘を行いながら領土を広げていくことになります。
特徴的なのは各ユニットの挙動の全てがプレイヤーのプログラムにかかっているというところです。
すなわち戦闘・生産・機動力といったユニットごとの性能はもちろん、
何を目的として・どこを目指して動くのか、敵やリソースを見つけたらどうするのかといった
行動パターンまで全てをプログラムする必要があるのです。
プログラミングのための言語はJavaScript、
ゲーム自体のAPIドキュメントも公式ページに完備されています。
MMOですからもちろん対戦相手は他の人間（によってプログラムされたユニット）です。
ゲームAIプログラミングにチャレンジする場としてかなり充実していると言えるでしょう。
    }

    +p{
DUSKERS\cite[`dusk`];をプログラミングがテーマのゲームというのは少々違うかもしれません。
プレイヤーは宇宙船のパイロットとなり、他の生存者を探して宇宙をさまようことになります。
各所に廃棄された宇宙船から資源を収集することでより長く探索を続けていくことになるのですが、
メインとなる作業は全て遠隔操作のドローンを用いて行われます。
CUIでコマンドを叩いてドローンを操作し、センサ越しに状況を見ながらの探索は、
本当に宇宙空間に一人でいるような没入感を体験させてくれます。
リアルタイムでのコマンドライン経由の操作という独特のプレイ感をぜひ体験してみてください。
    }
  >

  +section{おわりに}<
    +p{
以上、つらつらと並び立てましたが、気になるものはあったでしょうか。
世界にゲーム含め娯楽は山ほどあり、何に有限の人生を使うかは難しい選択ではありますが
その選択肢の一つにこれらのゲームを加えられることができていれば幸いです。
    }
  >

    >
>

end
