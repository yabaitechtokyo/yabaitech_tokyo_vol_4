@import: ../base/block
@import: ../base/inline
@import: ../base/int
@import: ../base/option-ext
@import: ../base/ref
@import: cross-ref

type toc-element =
| TOCElementChapter    of string * inline-text * inline-text option * inline-text
% | TOCElementSection    of string * inline-text
% | TOCElementSubsection of string * inline-text

module TableOfContents : sig
  
  val make-bb : (toc-element list) ref -> context -> block-boxes

end = struct

  % TODO: make common file for font config
  let font-size-normal  = 11pt
  let font-size-title   = 32pt
  let font-size-author  = 16pt
  let font-size-chapter = 24pt
  let font-size-chapter-subtitle = 16pt
  let font-size-chapter-author = 18pt
  let font-size-section = 18pt
  let font-size-subsection = 16pt

  let section-top-margin = 20pt
  let section-bottom-margin = 12pt
  let section-top-padding = 6pt
  let section-bottom-padding = 7pt
  let title-line-margin = 4pt
  let title-line-thickness = 1pt
  let header-line-thickness = 0.5pt
  let header-line-margin-top = 2pt
  let header-line-margin-bottom = 6pt

  let toc-section-indent = 20pt
  let toc-subsection-indent = 40pt

  let font-ratio-latin = 1.
  let font-ratio-cjk = 0.88

  let font-latin-roman  = (`Junicode`   , font-ratio-latin, 0.)
  let font-latin-italic = (`Junicode-it`, font-ratio-latin, 0.)
  let font-latin-bold   = (`Junicode-b` , font-ratio-latin, 0.)
  let font-latin-sans   = (`lmsans`    , font-ratio-latin, 0.)
  let font-latin-mono   = (`lmmono`    , font-ratio-latin, 0.)
  let font-cjk-mincho   = (`ipaexm`    , font-ratio-cjk  , 0.)
  let font-cjk-gothic   = (`ipaexg`    , font-ratio-cjk  , 0.)
  let font-otherscript-roman = (`cmunrm` , font-ratio-latin, 0.)

  let set-latin-font font ctx =
    ctx |> set-font Latin font

  let set-cjk-font font ctx =
    ctx |> set-font HanIdeographic font
        |> set-font Kana           font

  let make-chapter-title ctx =
    ctx |> set-font-size font-size-chapter
        |> set-font Latin font-latin-bold
        |> set-cjk-font font-cjk-gothic

  let-rec repeat-inline n ib =
    if n <= 0 then inline-nil else
      ib ++ (repeat-inline (n - 1) ib)

  let make-dots-line ctx w =
    let ib = read-inline ctx {.} ++ inline-skip 1pt in
    let wdot = get-natural-width ib in
    let n = round (w /' wdot) in
      inline-fil ++ (repeat-inline n ib)

  let make-bb toc-acc-ref ctx = 
    let bb-toc-main =
        toc-acc-ref
        |> Ref.get
        |> List.reverse
        |> List.fold-left (fun bbacc tocelem -> (
             match tocelem with
             | TOCElementChapter(label, title, subtitle, author) ->
                 let ctx = ctx |> set-latin-font font-latin-bold
                 in
                 let ib-title = ctx |> Inline.read {#title;}
                 in
                 let ib-subtitle = (subtitle
                   |> Option.map (fun st -> (
                        Inline.concat [
                          inline-skip 10pt;
                          ctx |> Inline.read {―#st;―};
                       ]
                   ))
                   |> Option.unwrap-or inline-nil)
                   ++ inline-skip 3pt
                 in
                 let it-page =
                   CrossRef.get-chapter-page label
                   |> Option.map (fun page-num ->
                           (arabic (Int.of-string page-num - 2)))
                   |> Option.unwrap-or `?`
                   |> embed-string
                 in
                 let ctx-bf =
                     ctx |> set-font Latin font-latin-bold
                         |> set-cjk-font font-cjk-gothic
                 in
                 let ib-author = inline-skip 30pt ++ read-inline ctx-bf {#author;} in
                 let ib-page = inline-skip 3pt ++ read-inline ctx it-page in
                 let ib-middle-dots-line =
                     let width = (get-text-width ctx)
                                 -' (get-natural-width ib-title)
                                 -' (get-natural-width ib-subtitle)
                                 -' (get-natural-width ib-page) in
                     if width <' 0pt then inline-fil else
                         make-dots-line ctx width
                 in
                 Block.concat [
                     bbacc;
                     line-break true true ctx
                       (Inline.concat [
                         ib-title;
                         ib-subtitle;
                         ib-middle-dots-line;
                         ib-page]);
                     line-break true true ctx ib-author;
                 ]
        )) block-nil
    in
    bb-toc-main
end