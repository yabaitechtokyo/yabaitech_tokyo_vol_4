@require: base/option-ext
@import: lib/cross-ref

module CrossRef2 : sig

    val register-number-if-present : string -> string -> string option -> unit

    val get-number : string -> string -> string option
    val get-page : string -> string -> string option

    val get-chapter-page : string -> string option

    val make-ib-ref : string -> context -> inline-boxes
    val make-ib-ref-page : string -> context -> inline-boxes

end = struct

    let register-number-if-present prefix num label-opt =
        match label-opt with
        | None -> ()
        | Some(label) -> register-cross-reference (prefix ^ `:` ^ label ^ `num`) num

    let get-number prefix label =
      CrossRef.get (prefix ^ label ^ `:num`)

    let get-page prefix label =
      CrossRef.get (prefix ^ label ^ `:page`)

    let get-chapter-page label = get-page `chapter:` label

    let gen-make-ib-ref key-annotator label-annotator =
        fun key ctx -> (
            let label =
                CrossRef.get (key-annotator key)
                |> Option.unwrap-or `?`
                |> embed-string
            in
            read-inline ctx (label-annotator label)
        )


    let make-ib-ref =
        gen-make-ib-ref
            (fun key -> key)
            (fun label -> label)

    let make-ib-ref-page =
        gen-make-ib-ref
            (fun key -> key ^ `:page`)
            (fun label -> label)

end